"use client"

import * as React from "react"
import {
	closestCenter,
	DndContext,
	KeyboardSensor,
	MouseSensor,
	TouchSensor,
	useSensor,
	useSensors,
	type DragEndEvent,
} from "@dnd-kit/core"
import { restrictToVerticalAxis } from "@dnd-kit/modifiers"
import {
	arrayMove,
	SortableContext,
	useSortable,
	verticalListSortingStrategy,
} from "@dnd-kit/sortable"
import { CSS } from "@dnd-kit/utilities"
import {
	IconChevronDown,
	IconChevronLeft,
	IconChevronRight,
	IconChevronsLeft,
	IconChevronsRight,
	IconDotsVertical,
	IconGripVertical,
	IconLayoutColumns,
	IconLoader,
	IconAlertTriangle,
	IconRefresh,
	IconTrash,
	IconEdit,
	IconEye,
} from "@tabler/icons-react"

import {
	flexRender,
	getCoreRowModel,
	getFacetedRowModel,
	getFacetedUniqueValues,
	getFilteredRowModel,
	getPaginationRowModel,
	getSortedRowModel,
	useReactTable,
	type ColumnDef,
	type Row,
	type VisibilityState,
	type SortingState,
	type ColumnFiltersState,
} from "@/lib/table"

import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Checkbox } from "@/components/ui/checkbox"
import {
	DropdownMenu,
	DropdownMenuCheckboxItem,
	DropdownMenuContent,
	DropdownMenuItem,
	DropdownMenuSeparator,
	DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import {
	Table,
	TableBody,
	TableCell,
	TableHead,
	TableHeader,
	TableRow,
} from "@/components/ui/table"

import { StatefulSetDetailDrawer } from "@/components/viewers/StatefulSetDetailDrawer"
import { useStatefulSets } from "@/hooks/use-k8s-data"
import { useNamespace } from "@/contexts/namespace-context"
import { type StatefulSetTableRow } from "@/lib/schemas/statefulset"

// Drag handle component
function DragHandle({ id }: { id: number }) {
	const { attributes, listeners } = useSortable({
		id,
	})

	return (
		<Button
			{...attributes}
			{...listeners}
			variant="ghost"
			size="icon"
			className="text-muted-foreground size-7 hover:bg-transparent"
		>
			<IconGripVertical className="text-muted-foreground size-3" />
			<span className="sr-only">Drag to reorder</span>
		</Button>
	)
}

// Column definitions for statefulsets table
const createColumns = (
	onViewDetails: (statefulSet: StatefulSetTableRow) => void
): ColumnDef<StatefulSetTableRow>[] => [
	{
		id: "drag",
		header: () => null,
		cell: ({ row }) => <DragHandle id={row.original.id} />,
	},
	{
		id: "select",
		header: ({ table }) => (
			<div className="flex items-center justify-center">
				<Checkbox
					checked={
						table.getIsAllPageRowsSelected() ||
						(table.getIsSomePageRowsSelected() && "indeterminate")
					}
					onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
					aria-label="Select all"
				/>
			</div>
		),
		cell: ({ row }) => (
			<div className="flex items-center justify-center">
				<Checkbox
					checked={row.getIsSelected()}
					onCheckedChange={(value) => row.toggleSelected(!!value)}
					aria-label="Select row"
				/>
			</div>
		),
		enableSorting: false,
		enableHiding: false,
	},
	{
		accessorKey: "name",
		header: "Name",
		cell: ({ row }) => (
			<button
				onClick={() => onViewDetails(row.original)}
				className="text-left font-medium hover:underline focus:underline focus:outline-none"
			>
				{row.getValue("name")}
			</button>
		),
	},
	{
		accessorKey: "namespace",
		header: "Namespace",
		cell: ({ row }) => (
			<Badge variant="secondary" className="text-xs">
				{row.getValue("namespace")}
			</Badge>
		),
	},
	{
		accessorKey: "ready",
		header: "Ready",
		cell: ({ row }) => {
			const ready = row.getValue("ready") as string
			const [current, desired] = ready.split("/").map(Number)
			const isReady = current === desired && desired > 0
			
			return (
				<div className="flex items-center gap-2">
					<Badge variant={isReady ? "default" : "secondary"}>
						{ready}
					</Badge>
				</div>
			)
		},
	},
	{
		accessorKey: "current",
		header: "Current",
		cell: ({ row }) => <div className="text-center">{row.getValue("current")}</div>,
	},
	{
		accessorKey: "updated",
		header: "Updated",
		cell: ({ row }) => <div className="text-center">{row.getValue("updated")}</div>,
	},
	{
		accessorKey: "serviceName",
		header: "Service",
		cell: ({ row }) => {
			const serviceName = row.getValue("serviceName") as string
			return (
				<Badge variant="outline" className="text-xs">
					{serviceName}
				</Badge>
			)
		},
	},
	{
		accessorKey: "updateStrategy",
		header: "Update Strategy",
		cell: ({ row }) => {
			const strategy = row.getValue("updateStrategy") as string
			return (
				<Badge variant="outline" className="text-xs">
					{strategy}
				</Badge>
			)
		},
	},
	{
		accessorKey: "age",
		header: "Age",
		cell: ({ row }) => <div className="text-right">{row.getValue("age")}</div>,
	},
	{
		id: "actions",
		header: () => <div className="text-center">Actions</div>,
		cell: ({ row }) => {
			const statefulSet = row.original

			return (
				<div className="flex items-center justify-center gap-2">
					<DropdownMenu>
						<DropdownMenuTrigger asChild>
							<Button
								variant="ghost"
								size="icon"
								className="size-8 text-muted-foreground hover:bg-muted"
							>
								<IconDotsVertical className="size-4" />
								<span className="sr-only">Open menu</span>
							</Button>
						</DropdownMenuTrigger>
						<DropdownMenuContent align="end" className="w-[200px]">
							<DropdownMenuItem onClick={() => onViewDetails(statefulSet)}>
								<IconEye className="mr-2 size-4" />
								View Details
							</DropdownMenuItem>
							<DropdownMenuItem>
								<IconEdit className="mr-2 size-4" />
								Edit YAML
							</DropdownMenuItem>
							<DropdownMenuSeparator />
							<DropdownMenuItem className="text-destructive">
								<IconTrash className="mr-2 size-4" />
								Delete
							</DropdownMenuItem>
						</DropdownMenuContent>
					</DropdownMenu>
				</div>
			)
		},
		enableSorting: false,
		enableHiding: false,
	},
]

// Row component for drag and drop
function DraggableRow({ row, children }: { row: Row<StatefulSetTableRow>; children: React.ReactNode }) {
	const { transform, transition, setNodeRef, isDragging } = useSortable({
		id: row.original.id,
	})

	const style = {
		transform: CSS.Transform.toString(transform),
		transition,
		opacity: isDragging ? 0.8 : 1,
	}

	return (
		<TableRow ref={setNodeRef} style={style} data-state={row.getIsSelected() && "selected"}>
			{children}
		</TableRow>
	)
}

export function StatefulSetsDataTable() {
	const [sorting, setSorting] = React.useState<SortingState>([])
	const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([])
	const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>({})
	const [rowSelection, setRowSelection] = React.useState({})
	const [data, setData] = React.useState<StatefulSetTableRow[]>([])
	const [selectedStatefulSet, setSelectedStatefulSet] = React.useState<StatefulSetTableRow | null>(null)

	// Fetch StatefulSets data
	const { data: statefulSetsData, loading, error, refetch } = useStatefulSets()
	const { selectedNamespace } = useNamespace()

	// Update data when statefulSetsData changes
	React.useEffect(() => {
		if (statefulSetsData) {
			setData(statefulSetsData)
		}
	}, [statefulSetsData])

	// Handle opening detail drawer
	const handleViewDetails = React.useCallback((statefulSet: StatefulSetTableRow) => {
		setSelectedStatefulSet(statefulSet)
	}, [])

	// Create columns with callbacks
	const columns = React.useMemo(() => createColumns(handleViewDetails), [handleViewDetails])

	const sensors = useSensors(
		useSensor(MouseSensor, {
			activationConstraint: {
				distance: 10,
			},
		}),
		useSensor(TouchSensor, {
			activationConstraint: {
				delay: 200,
				tolerance: 5,
			},
		}),
		useSensor(KeyboardSensor)
	)

	const table = useReactTable({
		data,
		columns,
		onSortingChange: setSorting,
		onColumnFiltersChange: setColumnFilters,
		getCoreRowModel: getCoreRowModel(),
		getPaginationRowModel: getPaginationRowModel(),
		getSortedRowModel: getSortedRowModel(),
		getFilteredRowModel: getFilteredRowModel(),
		onColumnVisibilityChange: setColumnVisibility,
		onRowSelectionChange: setRowSelection,
		getFacetedRowModel: getFacetedRowModel(),
		getFacetedUniqueValues: getFacetedUniqueValues(),
		state: {
			sorting,
			columnFilters,
			columnVisibility,
			rowSelection,
		},
	})

	const handleDragEnd = React.useCallback((event: DragEndEvent) => {
		const { active, over } = event

		if (active.id !== over?.id) {
			setData((items) => {
				const activeIndex = items.findIndex((item) => item.id === active.id)
				const overIndex = items.findIndex((item) => item.id === over?.id)

				return arrayMove(items, activeIndex, overIndex)
			})
		}
	}, [])

	if (loading) {
		return (
			<div className="px-4 lg:px-6">
				<div className="flex items-center justify-center py-10">
					<IconLoader className="size-6 animate-spin" />
					<span className="ml-2">Loading StatefulSets...</span>
				</div>
			</div>
		)
	}

	if (error) {
		return (
			<div className="px-4 lg:px-6">
				<div className="flex items-center justify-center py-10 text-red-600">
					<IconAlertTriangle className="size-6" />
					<span className="ml-2">Error: {error}</span>
				</div>
			</div>
		)
	}

	return (
		<div className="px-4 lg:px-6">
			<div className="space-y-4">
				<div className="flex items-center justify-between">
					<div className="flex items-center space-x-2">
						<p className="text-sm text-muted-foreground">
							{table.getFilteredRowModel().rows.length} of {table.getCoreRowModel().rows.length} StatefulSet(s)
							{selectedNamespace !== "all" && (
								<span className="ml-1">in namespace "{selectedNamespace}"</span>
							)}
						</p>
					</div>

				<div className="flex items-center space-x-2">
					<Button
						variant="outline"
						size="sm"
						onClick={refetch}
						disabled={loading}
					>
						<IconRefresh className="mr-2 size-4" />
						Refresh
					</Button>

					<DropdownMenu>
						<DropdownMenuTrigger asChild>
							<Button variant="outline" size="sm">
								<IconLayoutColumns className="mr-2 size-4" />
								Columns
								<IconChevronDown className="ml-2 size-4" />
							</Button>
						</DropdownMenuTrigger>
						<DropdownMenuContent align="end" className="w-[200px]">
							{table
								.getAllColumns()
								.filter((column) => typeof column.accessorFn !== "undefined" && column.getCanHide())
								.map((column) => {
									return (
										<DropdownMenuCheckboxItem
											key={column.id}
											className="capitalize"
											checked={column.getIsVisible()}
											onCheckedChange={(value) => column.toggleVisibility(!!value)}
										>
											{column.id}
										</DropdownMenuCheckboxItem>
									)
								})}
						</DropdownMenuContent>
					</DropdownMenu>
				</div>
			</div>

			<div className="rounded-md border">
				<DndContext
					sensors={sensors}
					collisionDetection={closestCenter}
					modifiers={[restrictToVerticalAxis]}
					onDragEnd={handleDragEnd}
				>
					<Table>
						<TableHeader className="bg-muted sticky top-0 z-10">
							{table.getHeaderGroups().map((headerGroup) => (
								<TableRow key={headerGroup.id}>
									{headerGroup.headers.map((header) => {
										return (
											<TableHead key={header.id} colSpan={header.colSpan}>
												{header.isPlaceholder
													? null
													: flexRender(header.column.columnDef.header, header.getContext())}
											</TableHead>
										)
									})}
								</TableRow>
							))}
						</TableHeader>
						<TableBody>
							<SortableContext
								items={data.map((item) => item.id)}
								strategy={verticalListSortingStrategy}
							>
								{table.getRowModel().rows?.length ? (
									table.getRowModel().rows.map((row) => (
										<DraggableRow key={row.id} row={row}>
											{row.getVisibleCells().map((cell) => (
												<TableCell key={cell.id}>
													{flexRender(cell.column.columnDef.cell, cell.getContext())}
												</TableCell>
											))}
										</DraggableRow>
									))
								) : (
									<TableRow>
										<TableCell colSpan={columns.length} className="h-24 text-center">
											No StatefulSets found.
										</TableCell>
									</TableRow>
								)}
							</SortableContext>
						</TableBody>
					</Table>
				</DndContext>
			</div>

			<div className="flex items-center justify-between space-x-2 py-4">
				<div className="flex items-center space-x-2">
					<p className="text-sm font-medium">Rows per page</p>
					<select
						value={table.getState().pagination.pageSize}
						onChange={(e) => {
							table.setPageSize(Number(e.target.value))
						}}
						className="h-8 w-[70px] rounded border border-input bg-background px-3 py-1 text-sm ring-offset-background focus:ring-2 focus:ring-ring focus:ring-offset-2"
					>
						{[10, 20, 30, 40, 50].map((pageSize) => (
							<option key={pageSize} value={pageSize}>
								{pageSize}
							</option>
						))}
					</select>
				</div>

				<div className="flex items-center space-x-6 lg:space-x-8">
					<div className="flex items-center space-x-2">
						<p className="text-sm font-medium">
							Page {table.getState().pagination.pageIndex + 1} of {table.getPageCount()}
						</p>
					</div>
					<div className="flex items-center space-x-2">
						<Button
							variant="outline"
							className="hidden size-8 p-0 lg:flex"
							onClick={() => table.setPageIndex(0)}
							disabled={!table.getCanPreviousPage()}
						>
							<span className="sr-only">Go to first page</span>
							<IconChevronsLeft className="size-4" />
						</Button>
						<Button
							variant="outline"
							className="size-8 p-0"
							onClick={() => table.previousPage()}
							disabled={!table.getCanPreviousPage()}
						>
							<span className="sr-only">Go to previous page</span>
							<IconChevronLeft className="size-4" />
						</Button>
						<Button
							variant="outline"
							className="size-8 p-0"
							onClick={() => table.nextPage()}
							disabled={!table.getCanNextPage()}
						>
							<span className="sr-only">Go to next page</span>
							<IconChevronRight className="size-4" />
						</Button>
						<Button
							variant="outline"
							className="hidden size-8 p-0 lg:flex"
							onClick={() => table.setPageIndex(table.getPageCount() - 1)}
							disabled={!table.getCanNextPage()}
						>
							<span className="sr-only">Go to last page</span>
							<IconChevronsRight className="size-4" />
						</Button>
					</div>
				</div>
			</div>

			{/* Detail Drawer */}
			<StatefulSetDetailDrawer
				statefulSet={selectedStatefulSet}
				open={!!selectedStatefulSet}
				onClose={() => setSelectedStatefulSet(null)}
			/>
			</div>
		</div>
	)
}
